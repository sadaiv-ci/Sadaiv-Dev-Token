/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DeSoCreatorCoinAMMInterface extends utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "calculateTokenPurchase(uint256)": FunctionFragment;
    "calculateTokenSale(uint256)": FunctionFragment;
    "purchaseTokens()": FunctionFragment;
    "reserveAmount()": FunctionFragment;
    "sellTokens(uint256)": FunctionFragment;
    "tokenSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balances"
      | "calculateTokenPurchase"
      | "calculateTokenSale"
      | "purchaseTokens"
      | "reserveAmount"
      | "sellTokens"
      | "tokenSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenPurchase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DeSoCreatorCoinAMM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeSoCreatorCoinAMMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenPurchase(
      reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenSale(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchaseTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTokens(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenPurchase(
    reserveAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenSale(
    tokensToSell: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchaseTokens(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sellTokens(
    tokensToSell: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenPurchase(
      reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenSale(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseTokens(overrides?: CallOverrides): Promise<void>;

    reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sellTokens(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenPurchase(
      reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenSale(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sellTokens(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenPurchase(
      reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenSale(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTokens(
      tokensToSell: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
