/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CreatorCoinSupplyCurveInterface extends utils.Interface {
  functions: {
    "DESO_PRICE()": FunctionFragment;
    "FOUNDER_REWARD_PERCENTAGE()": FunctionFragment;
    "INITIAL_SUPPLY()": FunctionFragment;
    "MAX_COINS()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "buyCoins(uint256)": FunctionFragment;
    "founder()": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "sellCoins(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DESO_PRICE"
      | "FOUNDER_REWARD_PERCENTAGE"
      | "INITIAL_SUPPLY"
      | "MAX_COINS"
      | "balances"
      | "buyCoins"
      | "founder"
      | "getPrice"
      | "sellCoins"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DESO_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FOUNDER_REWARD_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_COINS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCoins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "founder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCoins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DESO_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FOUNDER_REWARD_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_COINS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyCoins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "founder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellCoins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "BuyCoins(address,uint256,uint256)": EventFragment;
    "SellCoins(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyCoins"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellCoins"): EventFragment;
}

export interface BuyCoinsEventObject {
  buyer: string;
  amount: BigNumber;
  cost: BigNumber;
}
export type BuyCoinsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyCoinsEventObject
>;

export type BuyCoinsEventFilter = TypedEventFilter<BuyCoinsEvent>;

export interface SellCoinsEventObject {
  seller: string;
  amount: BigNumber;
  payout: BigNumber;
}
export type SellCoinsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SellCoinsEventObject
>;

export type SellCoinsEventFilter = TypedEventFilter<SellCoinsEvent>;

export interface CreatorCoinSupplyCurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreatorCoinSupplyCurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DESO_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    FOUNDER_REWARD_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_COINS(overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    founder(overrides?: CallOverrides): Promise<[string]>;

    getPrice(
      currentSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DESO_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  FOUNDER_REWARD_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_COINS(overrides?: CallOverrides): Promise<BigNumber>;

  balances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyCoins(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  founder(overrides?: CallOverrides): Promise<string>;

  getPrice(
    currentSupply: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellCoins(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DESO_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FOUNDER_REWARD_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COINS(overrides?: CallOverrides): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    founder(overrides?: CallOverrides): Promise<string>;

    getPrice(
      currentSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BuyCoins(address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      cost?: null
    ): BuyCoinsEventFilter;
    BuyCoins(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      cost?: null
    ): BuyCoinsEventFilter;

    "SellCoins(address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      amount?: null,
      payout?: null
    ): SellCoinsEventFilter;
    SellCoins(
      seller?: PromiseOrValue<string> | null,
      amount?: null,
      payout?: null
    ): SellCoinsEventFilter;
  };

  estimateGas: {
    DESO_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FOUNDER_REWARD_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COINS(overrides?: CallOverrides): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    founder(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      currentSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DESO_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FOUNDER_REWARD_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_COINS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    founder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      currentSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellCoins(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
